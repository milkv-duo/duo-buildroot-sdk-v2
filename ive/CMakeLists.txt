cmake_minimum_required(VERSION 3.2.2)
project(ive_project)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Get current commit
execute_process(COMMAND git show --oneline -s WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_VARIABLE CURRENT_COMMIT)
execute_process(COMMAND git rev-parse --abbrev-ref HEAD WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_VARIABLE LATEST_BRANCH)
string(STRIP ${LATEST_BRANCH} LATEST_BRANCH)
message(STATUS "Using toolchain file: ${CMAKE_TOOLCHAIN_FILE}")
message("CMAKE_C_COMPILER" ${CMAKE_C_COMPILER} )
message("tcpath" ${TC_PATH}${CROSS_COMPILE}gcc) 
if ("${LATEST_BRANCH}" STREQUAL "master")
  string(REPLACE " " ";" WORD_LIST ${CURRENT_COMMIT})
  list(GET WORD_LIST 0 COMMITID)
  set(LATEST_TAG "nightly-${COMMITID}")
elseif("${LATEST_BRANCH}" STREQUAL "HEAD")
  string(REPLACE " " ";" WORD_LIST ${CURRENT_COMMIT})
  list(GET WORD_LIST 0 COMMITID)
  set(LATEST_TAG "${COMMITID}")
else()
  string(REGEX MATCH "([0-9]+)\\.([0-9]+)\\.([0-9]+)*[^(\\\n).]+" LATEST_TAG ${LATEST_BRANCH})
  if ("${LATEST_TAG}" STREQUAL "")
    set(LATEST_TAG "unknown")
  endif()
  string(REPLACE " " ";" WORD_LIST ${CURRENT_COMMIT})
  list(GET WORD_LIST 0 COMMITID)
  set(LATEST_TAG "${LATEST_TAG}-${COMMITID}")
endif()

set(CMAKE_C_COMPILER ${TC_PATH}${CROSS_COMPILE}gcc)
set(CMAKE_CXX_COMPILER ${TC_PATH}${CROSS_COMPILE}g++)

if ("${CMAKE_BUILD_TYPE}" STREQUAL "")
  set(CMAKE_BUILD_TYPE "Release")
endif()

if("${CVI_PLATFORM}" STREQUAL "")
  set(CVI_PLATFORM "cv1835")
  message(AUTHOR_WARNING "Platform not provided, set to ${CVI_PLATFORM}.")
endif()

# Reset flag string
set(WORKAROUND_FLAGS_STR "")

# platform specific settings
if("${CVI_PLATFORM}" STREQUAL "CV183X")
  add_definitions(-DWORKAROUND_SCALAR_4096_ALIGN_BUG)
  set(WORKAROUND_FLAGS_STR "${WORKAROUND_FLAGS_STR} WORKAROUND_SCALAR_4096_ALIGN_BUG")
# elseif ("${CVI_PLATFORM}" STREQUAL "CV180X")
elseif ("${CVI_PLATFORM}" STREQUAL "CV180X"  OR "${CVI_PLATFORM}" STREQUAL "CV181X")
  add_definitions(-DCV180X)
  add_definitions(-D__CV180X__)
endif()

if ("${CMAKE_INSTALL_PREFIX}" STREQUAL "/usr/local")
  set(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/install_soc")
endif()
# Find toolchain cmake file and toolchain folder
if("${CMAKE_TOOLCHAIN_FILE}" STREQUAL "")
  message(FATAL_ERROR "CMAKE_TOOLCHAIN_FILE is not set. Aborting.")
endif()

# Check if MLIR SDK exists.
include(cmake/mlir.cmake)

# Check if middleware exists.
include (cmake/middleware.cmake)

set(CMAKE_C_INIT "-fsigned-char -Werror=all -fdiagnostics-color=always")
set(CMAKE_CXX_INIT "-fsigned-char -fPIC -Werror=all -fdiagnostics-color=always -std=gnu++11")
if("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_INIT} ${CMAKE_C_FLAGS_RELEASE}" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_INIT} ${CMAKE_CXX_FLAGS_RELEASE}" )
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "SDKRelease")
    set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_INIT} ${CMAKE_C_FLAGS_RELEASE} -s" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_INIT} ${CMAKE_CXX_FLAGS_RELEASE} -s" )
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_INIT} ${CMAKE_C_FLAGS_DEBUG}" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_INIT} ${CMAKE_CXX_FLAGS_DEBUG}" )
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "Asan")
    set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_INIT} ${CMAKE_C_FLAGS_DEBUG} -fsanitize=address" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_INIT} ${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address" )
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "Tsan")
    set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_INIT} ${CMAKE_C_FLAGS_DEBUG} -fsanitize=thread" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_INIT} ${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=thread" )
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "UBsan")
    set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_INIT} ${CMAKE_C_FLAGS_DEBUG} -fsanitize=undefined" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_INIT} ${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=undefined" )
    set( CMAKE_EXE_LINKER_FLAGS "-lubsan")
else()
    message(FATAL_ERROR "No build type!!!")
endif()

message("==================================================")
message("Latest tag       ${LATEST_TAG}")
message("Commit           ${CURRENT_COMMIT}")
message("[Summary]")
message("Platform         ${CVI_PLATFORM}")
message("Target           ${CVI_TARGET}")
message("Build type       ${CMAKE_BUILD_TYPE}")
message("C   compiler     ${CMAKE_C_COMPILER}")
message("CXX compiler     ${CMAKE_CXX_COMPILER}")
message("C Flags          ${CMAKE_C_FLAGS}")
message("CXX Flags        ${CMAKE_CXX_FLAGS}")
message("Install dir      ${CMAKE_INSTALL_PREFIX}")
message("")
message("Workaround flags ${WORKAROUND_FLAGS_STR}")
message("==================================================")

add_subdirectory(src)
add_subdirectory(sample)
add_subdirectory(test)
